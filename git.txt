# AjaxFB.github.io
#Crie um repositório no bitbucket e libere permissão de visualização
#Crie, utilize e disponibilize a branch de desenvolvimento develop
#Crie, utilize a branch de feature/soma
#Adicione no test/test_pytest.py o código abaixo e construa o main.py
```python
from main import sum_numbers_sequence
def test_check_sum_1():
    assert sum_numbers_sequence([0,1,2,3,5,8]) == 19def test_check_sum_2():
    assert sum_numbers_sequence([.1,.2,.3,.4]) == 1
```
#Disponibilize a branch feature/soma de modo que o teste passe
#Atualize e disponibilize a branch develop a partir da nova feature
#Crie e utilize a branch de feature/divisao
#Adicione no test/test_pytest.py o código abaixo e construa o main.py
```python
from main import div_numbers_sequence
def test_check_div_1():
    assert div_numbers_sequence(10,2) == 5def test_check_div_2():
    assert div_numbers_sequence(.5,.1) == 5
```
#Disponibilize a branch feature/divisao de modo que o teste passe
#Atualize e disponibilize a branch develop a partir da nova feature
#Crie e utilize a branch de release/0.1.0 (a partir do develop ou das features)
#Disponibilize a release/0.1.0 com as features soma e divisao
#Crie e utilize a branch de hotfix/soma_e_divisao
#Adicione no test/test_pytest.py o código abaixo
```python
def test_check_sum_3():
    assert sum_numbers_sequence([.1,.2]) == .3def test_check_div_3():
    assert div_numbers_sequence(.3,.1) == 3
```
#Disponibilize a branch hotfix/soma_e_divisao de modo que o teste passe
#Disponibilize a branch develop com o hotfix
#Disponibilize a branch release/0.1.1 com o hotfix a partir da release/0.1.0
#Disponibilize a branch master e sua tag (0.1) a partir da branch release/0.1.1
#Opcionalmente crie uma branch de documentation para alterar o README.md
#Opcionalmente crie um pull request de exemplo simulando um merge na develop, na release ou na master
#Opcionalmente crie testes e um bugfix que resolva em definitivo o problema de precisão do float
